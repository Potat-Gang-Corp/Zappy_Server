name: Mirror Server to Private Repo

on:
  push:
    branches:
      - main

env:
  BUILD_STATUS: null

jobs:
  sync_Server:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Server Repository
      uses: actions/checkout@v3

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Trigger Jenkins Build
      env:
        JENKINS_URL: ${{ secrets.JENKINS_URL }}
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
        JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
      run: |
        build_url="${JENKINS_URL}${JENKINS_JOB_NAME}/build"
        job_response=$(curl -s -X POST "$build_url" --user ${JENKINS_USER}:${JENKINS_API_TOKEN})

        sleep 7

        last_build_number=$(curl -s "${JENKINS_URL}${JENKINS_JOB_NAME}/lastBuild/buildNumber" --user ${JENKINS_USER}:${JENKINS_API_TOKEN})

        while true; do
          BUILD_STATUS=$(curl -s "${JENKINS_URL}${JENKINS_JOB_NAME}/${last_build_number}/api/json" --user ${JENKINS_USER}:${JENKINS_API_TOKEN} | jq -r '.result')
          if [ "$BUILD_STATUS" == "SUCCESS" ]; then
            echo "Build succeeded."
            echo "BUILD_STATUS=SUCCESS" >> $GITHUB_ENV
            exit 0
          elif [ "$BUILD_STATUS" == "FAILURE" ]; then
            echo "Build failed."
            echo "BUILD_STATUS=FAILURE" >> $GITHUB_ENV
            exit 1
          elif [ "$BUILD_STATUS" == "ABORTED" ]; then
            echo "Build was aborted."
            echo "BUILD_STATUS=ABORTED" >> $GITHUB_ENV
            exit 1
          elif [ "$BUILD_STATUS" == "null" ]; then
            echo "Build is still running..."
          else
            echo "Unknown build status: $BUILD_STATUS"
            echo "BUILD_STATUS=UNKNOWN" >> $GITHUB_ENV
            exit 1
          fi
          sleep 5
        done

    - name: Sync with Private Repository
      if: env.BUILD_STATUS == 'SUCCESS'
      env:
        SSH_PRIVATE_KEY: ${{ secrets.POTAT_KEY }}
      run: |
        git config --global user.email "camille.ricardon@epitech.eu"
        git config --global user.name "CamilleRicardon"
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone the private repo
        git clone --depth 1 git@github.com:Potat-Gang-Corp/Zappy.git private-repo

        # Ensure the destination directory exists
        mkdir -p private-repo/Server

        # Copy server files to the Server directory in the private repo
        rsync -av --delete --exclude '.git' --exclude 'private-repo' --exclude '.github' . private-repo/Server/

        cd private-repo
        git add Server/
        git commit -m "[+] Sync Server repository with Final one

        Co-authored-by: Noah <noah.gibelli@epitech.eu>
        Co-authored-by: Emna <emna.boukadida@epitech.eu>"
        git push origin main
