Explication des Composants

    Inclusion du fichier d'en-tête (#include <time.h>):
        Ce fichier d'en-tête est nécessaire pour accéder à la fonction clock_gettime() et à la structure de données timespec.

    Déclaration de la fonction current_time_millis():
        La fonction retourne un double, qui représente le temps actuel en millisecondes.

    Déclaration de la structure timespec ts:
        struct timespec est une structure définie dans POSIX pour stocker des intervalles de temps avec une précision jusqu'aux nanosecondes. Elle contient deux champs :
            tv_sec : le nombre de secondes.
            tv_nsec : le nombre de nanosecondes restantes, qui sont toujours inférieures à une seconde.

    Appel de clock_gettime(CLOCK_MONOTONIC, &ts):
        clock_gettime() est une fonction qui remplit la structure timespec avec le temps actuel du type d'horloge spécifié.
        CLOCK_MONOTONIC est une horloge qui mesure le temps écoulé depuis un point fixe du passé (généralement le démarrage du système), ne reculant ni n'avancant jamais, ce qui la rend idéale pour mesurer des intervalles précis dans les applications où la mesure du temps est critique.

    Calcul du temps en millisecondes:
        Si clock_gettime() réussit (retourne 0), la fonction calcule le temps en millisecondes comme suit :
            ts.tv_sec * 1000.0 : Convertit les secondes en millisecondes.
            ts.tv_nsec / 1000000.0 : Convertit les nanosecondes en millisecondes.
        Ces deux valeurs sont additionnées pour obtenir le temps total en millisecondes.

    Gestion des erreurs:
        Si clock_gettime() échoue, la fonction retourne -1. Ceci est un moyen simple de signaler une erreur à l'appelant, qui doit alors gérer cette valeur de retour d'erreur de manière appropriée.

Utilisation

Cette fonction est utile dans des contextes où vous avez besoin de mesurer le temps avec précision, par exemple pour synchroniser des actions ou des événements dans un jeu, mesurer des performances, ou assurer que certaines tâches s'exécutent à intervalles réguliers. En utilisant CLOCK_MONOTONIC, vous évitez les problèmes liés aux ajustements de l'heure système, ce qui est crucial pour maintenir une mesure de temps fiable dans des applications sensibles au temps.


-------------------------


L'expression 1000000 / FREQ; est souvent utilisée pour convertir une fréquence donnée, exprimée en hertz (Hz), en intervalle de temps en microsecondes pour la configuration des timeouts, notamment dans le contexte d'une fonction comme select(). Analysons cette expression en détail :
Comprendre les Composants de l'Expression

    1000000 : Ce nombre représente le nombre de microsecondes dans une seconde. Une microseconde est un millionième de seconde, donc il y a 1 000 000 de microsecondes dans une seconde.

    FREQ : C'est une variable ou une constante qui représente la fréquence à laquelle vous voulez que certains événements se produisent dans votre programme, en nombre de fois par seconde (hertz, Hz). Par exemple, si FREQ est définie à 100, cela signifie que l'événement devrait se produire 100 fois par seconde.

Calcul de l'Intervalle de Temps

Quand vous divisez 1 000 000 par FREQ, vous calculez combien de microsecondes devraient s'écouler entre chaque événement pour atteindre la fréquence désirée. Par exemple :

    Si FREQ = 100, cela signifie que vous voulez que l'événement se produise 100 fois par seconde.
    1000000 / 100 = 10000 microsecondes, soit 10 millisecondes.

Cela signifie que pour que l'événement se produise 100 fois par seconde, il doit se produire toutes les 10 000 microsecondes (ou toutes les 10 millisecondes).
Utilisation dans select()

Dans le contexte d'une fonction comme select(), cette expression est utilisée pour définir le champ tv_usec de la structure timeval, qui spécifie combien de temps select() doit attendre (timeout) avant de retourner s'il n'y a pas d'activité sur les descripteurs de fichiers qu'il surveille. Voici comment cela pourrait être utilisé :

c

struct timeval timeout;
timeout.tv_sec = 0;        // 0 secondes
timeout.tv_usec = 1000000 / FREQ;  // Intervalles en microsecondes basés sur la fréquence

Si FREQ est de 100, select() attendra jusqu'à 10 millisecondes pour une activité. Si aucune activité n'est détectée pendant ce temps, select() retourne avec 0, permettant ainsi à votre programme de faire autre chose, comme mettre à jour l'état du jeu, vérifier les entrées des utilisateurs, ou tout autre traitement nécessaire.
Résumé

L'utilisation de 1000000 / FREQ est donc une manière de transformer une fréquence en un intervalle de temps compatible avec les fonctions nécessitant des spécifications de temps en microsecondes. Cette méthode garantit que les événements se produisent à une fréquence spécifiée, ce qui est particulièrement utile dans les applications en temps réel où la précision du timing est cruciale.